name: Ingest Obsidian Notes

on:
  push:
    paths:
      - '**/*.md'
  workflow_dispatch:

jobs:
  ingest:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repo so we can see what files changed
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2️⃣ Grab the list of changed .md files
      - name: Find changed markdown files
        id: find_notes
        run: |
          raw=$(git diff --name-only ${{ github.sha }} ${{ github.sha }}~1 | grep '\.md$' || true)
          joined=$(echo "$raw" | paste -sd '|:|' -)
          echo "files=$joined" >> $GITHUB_OUTPUT

      # 3️⃣ For each changed file whose frontmatter has ingest: true, POST it to Supabase
      - name: Filter frontmatter & call Supabase
        if: steps.find_notes.outputs.files != ''
        env:
          SUPABASE_URL: https://sffsnpwqifdiwcepotdb.supabase.co/functions/v1
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          set -euxo pipefail

          # Install yq (v4) & jq
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update && sudo apt-get install -y jq

          # split based on the same delimiter you joined with
          IFS='|:|' read -r -a files <<< "${{ steps.find_notes.outputs.files }}"

          for file in "${files[@]}"; do
            [[ -f "$file" ]] || continue

            # read ingest flag directly with yq
            ingest=$(yq e '.ingest' "$file")
            [[ "$ingest" == "true" ]] || continue
            echo "→ ingesting $file …"

            # pull fields via yq
            tp=$(yq e '.type' "$file")
            dt=$(yq e '.date' "$file")
            tg=$(yq e '.tags | @json' "$file")

            # extract the body between the two '---' lines in one quoted awk call
            ct=$(
              awk 'BEGIN { p=0 }
                   /^---$/ { if (p==0) { p=1; next } else { exit } }
                   p==1 && !/^---$/ { print }
                  ' "$file" \
              | jq -Rs .
            )

            # build your payload
            payload=$(
              jq -n \
                --arg persona_id "48245528-5e58-4631-9755-cddd1a40a4a6" \
                --arg doc_path   "$file" \
                --arg type       "$tp" \
                --arg date       "$dt" \
                --argjson tags   "$tg" \
                --arg content    "$ct" \
                '{ persona_id, doc_path, type, date, tags, content }'
            )

            # POST to your edge function
            curl -s -w "\n⇢ HTTP_CODE=%{http_code}\n" \
              -X POST "$SUPABASE_URL/ingest" \
              -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Content-Type: application/json" \
              -d "$payload"
          done
