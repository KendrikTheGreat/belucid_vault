name: Ingest FoundersNotes

on:
  push:
    paths:
      - 'FoundersNotes/**/*.md'
  workflow_dispatch:

jobs:
  ingest_foundersnotes:
    runs-on: ubuntu-latest
    steps:
      # 1Ô∏è‚É£ Checkout your repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Find only the FoundersNotes .md files changed in this push
      - name: Find changed .md under FoundersNotes
        id: find_notes
        run: |
          raw=$(git diff --name-only ${{ github.sha }} ${{ github.sha }}~1 \
                | grep '^FoundersNotes/.*\.md$' || true)
          printf "files<<EOF\n%s\nEOF\n" "$raw" >> $GITHUB_OUTPUT

      # 3Ô∏è‚É£ Quick check that your function is up
      - name: Test Supabase function endpoint
        if: steps.find_notes.outputs.files != ''
        env:
          # Add your full function URL as a secret: e.g. https://xyz.supabase.co/functions/v1
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        run: |
          echo "üîç Testing $SUPABASE_URL/ingest"
          curl -I --fail "$SUPABASE_URL/ingest"

      # 4Ô∏è‚É£ Ingest each matching file into Supabase
      - name: Ingest into Supabase
        if: steps.find_notes.outputs.files != ''
        env:
          SUPABASE_URL:              ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          set -euxo pipefail

          # Install yq & jq
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update && sudo apt-get install -y jq

          # Build array of changed files
          mapfile -t files <<< "${{ steps.find_notes.outputs.files }}"

          for file in "${files[@]}"; do
            [[ -f "$file" ]] || continue

            echo "‚Üí Processing $file ‚Ä¶"

            # Extract only the YAML front-matter
            front=$(awk 'BEGIN{f=0} /^---$/{ if(f){exit} else {f=1; next} } f==1{ print }' "$file")

            # Skip if ingest flag not true
            ingest=$(printf '%s\n' "$front" | yq e '.ingest' -)
            [[ "$ingest" == "true" ]] || continue

            # Parse required front-matter fields
            persona_id=$(printf '%s\n' "$front" | yq e '.persona_id' -)
            date=$(printf '%s\n' "$front" | yq e '.date' -)

            # Fail early if persona_id or date are missing
            if [[ -z "$persona_id" || "$persona_id" == "null" || -z "$date" ]]; then
              echo "‚ùå Error: missing persona_id or date in $file" >&2
              exit 1
            fi

            # Parse optional fields with safe defaults
            tags=$(printf '%s\n' "$front" | yq e '.tags // [] | @json' -)
            metadata=$(printf '%s\n' "$front" | yq e '.metadata // {} | tojson' -)

            # Grab the body (everything after second '---')
            content=$(awk 'BEGIN{p=0} /^---$/{p++; next} p==2{print}' "$file" | jq -Rs .)

            # Build JSON payload
            payload=$(
              jq -n \
                --arg persona_id "$persona_id" \
                --arg date        "$date" \
                --arg content     "$content" \
                --argjson tags    "$tags" \
                --argjson metadata "$metadata" \
                '{ persona_id: $persona_id, date: $date, content: $content, tags: $tags, metadata: $metadata }'
            )

            # Call your Edge Function
            curl -s -w "\n‚Üí HTTP_CODE=%{http_code}\n" \
              -X POST "$SUPABASE_URL/ingest" \
              -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Content-Type: application/json" \
              -d "$payload"
          done
